Implement page replacement policy FIFO.

CODE:

#include <stdio.h>
#include <stdlib.h>

int main() {
    int incomingStream[] = {4, 1, 2, 4, 5};
    int pagefaults = 0;
    int pagehits = 0;
    int frames = 3;
    int m, n, s, pages;



    int *temp = (int *)malloc(frames * sizeof(int)); // Dynamic memory allocation
    pages = sizeof(incomingStream) / sizeof(incomingStream[0]);
    printf("Incoming \t Frame1 \t Frame2 \t Frame3\n");
    for (m = 0; m < frames; m++) {
	temp[m] = -1;
    }

    for (m = 0; m < pages; m++) {
        s = 0;
        for (n = 0; n < frames; n++) {
            if (incomingStream[m] == temp[n]) {
                s++;
                ++pagehits;
                --pagefaults;
            }
        }
        ++pagefaults;


 if (pagefaults <= frames) {
                temp[m] = incomingStream[m];
            } 
        else if(s==0) {
                temp[(pagefaults - 1) % frames] - incomingStream[m];
            }


        printf("\t%d\t\t", incomingStream[m]);
        for (n = 0; n < frames; n++) {
            if (temp[n] != -1)
                printf("\t%d\t\t", temp[n]);
            else
                printf("\t-\t\t");
        }
        printf("\n");
    }

    free(temp); // Free dynamically allocated memory
    printf("\nTotal number of page hits: %d\n", pagehits);
    printf("Total number of page faults: %d\n", pagefaults);
    return 0;
}



for Turbo C:

#include <stdio.h>
#include <stdlib.h>
#include <conio.h> // for getch()

int main() {
    int incomingStream[] = {4, 1, 2, 4, 5};
    int pagefaults = 0;
    int pagehits = 0;
    int frames = 3;
    int m, n, s, pages;

    int *temp = (int *)malloc(frames * sizeof(int)); // Dynamic memory allocation
    pages = sizeof(incomingStream) / sizeof(incomingStream[0]);
    printf("Incoming \t Frame1 \t Frame2 \t Frame3\n");
    for (m = 0; m < frames; m++) {
        temp[m] = -1;
    }

    for (m = 0; m < pages; m++) {
        s = 0;
        for (n = 0; n < frames; n++) {
            if (incomingStream[m] == temp[n]) {
                s++;
                ++pagehits;
                --pagefaults;
            }
        }
        ++pagefaults;

        if (pagefaults <= frames) {
            temp[m] = incomingStream[m];
        } else if (s == 0) {
            temp[(pagefaults - 1) % frames] = incomingStream[m];
        }

        printf("\t%d\t\t", incomingStream[m]);
        for (n = 0; n < frames; n++) {
            if (temp[n] != -1)
                printf("\t%d\t\t", temp[n]);
            else
                printf("\t-\t\t");
        }
        printf("\n");
    }

    free(temp); // Free dynamically allocated memory
    printf("\nTotal number of page hits: %d\n", pagehits);
    printf("Total number of page faults: %d\n", pagefaults);

    getch(); // Wait for user input before exiting
    return 0;
}


