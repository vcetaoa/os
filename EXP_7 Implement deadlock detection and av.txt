Implement deadlock detection and avoidance using Bankerâ€™s algorithm. 

CODE:

#include <stdio.h>

int main() {
    int n, m, i, j, k;
    n = 5; // number of processes
    m = 3; // number of resource types

    int alloc[5][3] = {{0, 1, 0},
                       {2, 0, 0},
                       {3, 0, 2},
                       {2, 1, 1},
                       {0, 0, 2}};

    int max[5][3] = {{7, 5, 3},
                     {3, 2, 2},
                     {9, 0, 2},
                     {2, 2, 2},
                     {4, 3, 3}};

    int avail[3] = {3, 3, 2};
    int f[n], ans[n], ind = 0;

    // Initialize finish array
    for (k = 0; k < n; k++) {
        f[k] = 0;
    }

    // Calculate the need matrix
    int need[n][m];

    // Print Allocation Matrix
    printf("Allocation Matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            printf("%d ", alloc[i][j]);
        }
        printf("\n");
    }

    // Print Maximum Matrix
    printf("\nMaximum Matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            printf("%d ", max[i][j]);
        }
        printf("\n");
    }

    // Calculate and print the Need Matrix
    printf("\nNeed Matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }

    // Iterate through each process
    int y = 0;
    for (k = 0; k < 5; k++) {
        for (i = 0; i < n; i++) {
            if (f[i] == 0) {
                int flag = 0;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > avail[j]) {
                        flag = 1;
                        break;
                    }
                }
                if (flag == 0) {
                    ans[ind++] = i;
                    for (y = 0; y < m; y++)
                        avail[y] += alloc[i][y];
                    f[i] = 1;
                }
            }
        }
    }

    // Check if the system is in a safe state
    int flag = 1;
    for (i = 0; i < n; i++) {
        if (f[i] == 0) {
            flag = 0;
            printf("THE FOLLOWING SYSTEM IS NOT SAFE");
            break;
        }
    }

    // Print the safe sequence
    if (flag == 1) {
        printf("\nFollowing is the SAFE sequence \n");
        for (i = 0; i < n - 1; i++)
            printf("P%d -->", ans[i]);
        printf("P%d", ans[n - 1]);
    }
    return 0;
}


_____________________________________________________________________________________

for TURBO C:

#include <stdio.h>

void main() {
    int n = 5, m = 3; // number of processes and resources
    int alloc[5][3], max[5][3], avail[3], f[5], ans[5],need[5][3];
    int i, j, k, y,flag, ind = 0;

    // Initialize allocation matrix
    alloc[0][0] = 0; alloc[0][1] = 1; alloc[0][2] = 0;
    alloc[1][0] = 2; alloc[1][1] = 0; alloc[1][2] = 0;
    alloc[2][0] = 3; alloc[2][1] = 0; alloc[2][2] = 2;
    alloc[3][0] = 2; alloc[3][1] = 1; alloc[3][2] = 1;
    alloc[4][0] = 0; alloc[4][1] = 0; alloc[4][2] = 2;

    // Initialize maximum matrix
    max[0][0] = 7; max[0][1] = 5; max[0][2] = 3;
    max[1][0] = 3; max[1][1] = 2; max[1][2] = 2;
    max[2][0] = 9; max[2][1] = 0; max[2][2] = 2;
    max[3][0] = 2; max[3][1] = 2; max[3][2] = 2;
    max[4][0] = 4; max[4][1] = 3; max[4][2] = 3;

    // Initialize available resources
    avail[0] = 3; avail[1] = 3; avail[2] = 2;

    // Initialize finish array
    for (k = 0; k < n; k++) {
	f[k] = 0;
    }

    // Calculate the need matrix


    // Print Allocation Matrix
    printf("Allocation Matrix:\n");
    for (i = 0; i < n; i++) {
	for (j = 0; j < m; j++) {
	    printf("%d ", alloc[i][j]);
	}
	printf("\n");
    }

    // Print Maximum Matrix
    printf("\nMaximum Matrix:\n");
    for (i = 0; i < n; i++) {
	for (j = 0; j < m; j++) {
	    printf("%d ", max[i][j]);
	}
	printf("\n");
    }

    // Calculate and print the Need Matrix
    printf("\nNeed Matrix:\n");
    for (i = 0; i < n; i++) {
	for (j = 0; j < m; j++) {
	    need[i][j] = max[i][j] - alloc[i][j];
	    printf("%d ", need[i][j]);
	}
	printf("\n");
    }

    // Banker's Algorithm
    for (k = 0; k < n; k++) {
	for (i = 0; i < n; i++) {
	    if (f[i] == 0) {
		int flag = 0;
		for (j = 0; j < m; j++) {
		    if (need[i][j] > avail[j])
			flag = 1;
		    break;
		}
		if (flag == 0) {
		    ans[ind++] = i;
		    for (y = 0; y < m; y++)
			avail[y] += alloc[i][y];
		    f[i] = 1;
		}
	    }
	}
    }

    // Check if the system is in a safe state
    flag = 1;
    for (i = 0; i < n; i++) {
        if (f[i] == 0) {
            flag = 0;
            printf("THE FOLLOWING SYSTEM IS NOT SAFE");
            break;
        }
    }

    // Print the safe sequence
    if (flag == 1) {
        printf("\nFollowing is the SAFE sequence \n");
        for (i = 0; i < n - 1; i++)
            printf("P%d -->", ans[i]);
        printf("P%d", ans[n - 1]);
    }
}

