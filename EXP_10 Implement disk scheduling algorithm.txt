Implement disk scheduling algorithms SCAN

CODE: 

#include <stdio.h>
#include <stdlib.h> // for abs()

int main() {
    
    int queue[20], n, head, i, j, k, seek = 0, max, temp, queue1[20], queue2[20], temp1 = 0, temp2 = 0;
    float avg;
    printf("Scan Disk Scheduling Algorithm : \n\n");
    printf("Enter the max range of disk: ");
    scanf("%d", &max);
    printf("Enter the initial head position: ");
    scanf("%d", &head);
    printf("Enter the size of queue request: ");
    scanf("%d", &n);
    printf("Enter the queue of disk positions to be read:\n");
    for (i = 0; i < n; i++)
        scanf("%d", &queue[i]);

    // Adding the head position to the queue
    queue[n] = head;
    n++;

    // Sorting the queue
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (queue[i] > queue[j]) {
                temp = queue[i];
                queue[i] = queue[j];
                queue[j] = temp;
            }
        }
    }

    // Finding the index of head in the sorted queue
    for (i = 0; i < n; i++) {
        if (head == queue[i]) {
            k = i;
            break;
        }
    }

    // Dividing the queue into two parts - left and right of head
    for (i = 0; i < k; i++) {
        queue1[temp1] = queue[i];
        temp1++;
    }
    for (i = k + 1; i < n; i++) {
        queue2[temp2] = queue[i];
        temp2++;
    }

    // Scanning towards the right
    for (i = 1; i < temp2; i++) {
        seek += abs(queue2[i] - queue2[i - 1]);
    }
    seek += abs(max - queue2[temp2 - 1]);

    // Scanning towards the left
    seek += abs(0 - queue1[temp1 - 1]);
    for (i = temp1 - 1; i > 0; i--) {
        seek += abs(queue1[i] - queue1[i - 1]);
    }

    printf("Total seek time: %d\n", seek);
    avg = (float)seek / n;
    printf("Average seek time: %.2f\n", avg);

    return 0;
}
